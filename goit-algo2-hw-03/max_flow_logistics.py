import networkx as nx

# Створення орієнтованого графа
G = nx.DiGraph()

# Додаємо ребра з пропускною здатністю
edges = [
    ("Термінал 1", "Склад 1", 25),
    ("Термінал 1", "Склад 2", 20),
    ("Термінал 1", "Склад 3", 15),
    ("Термінал 2", "Склад 3", 15),
    ("Термінал 2", "Склад 4", 30),
    ("Термінал 2", "Склад 2", 10),
    ("Склад 1", "Магазин 1", 15),
    ("Склад 1", "Магазин 2", 10),
    ("Склад 1", "Магазин 3", 20),
    ("Склад 2", "Магазин 4", 15),
    ("Склад 2", "Магазин 5", 10),
    ("Склад 2", "Магазин 6", 25),
    ("Склад 3", "Магазин 7", 20),
    ("Склад 3", "Магазин 8", 15),
    ("Склад 3", "Магазин 9", 10),
    ("Склад 4", "Магазин 10", 20),
    ("Склад 4", "Магазин 11", 10),
    ("Склад 4", "Магазин 12", 15),
    ("Склад 4", "Магазин 13", 5),
    ("Склад 4", "Магазин 14", 10),
]

# Додаємо ребра до графа
for u, v, capacity in edges:
    G.add_edge(u, v, capacity=capacity)

# Додаємо джерело і стік
G.add_edge("Джерело", "Термінал 1", capacity=float("inf"))
G.add_edge("Джерело", "Термінал 2", capacity=float("inf"))
for i in range(1, 15):
    G.add_edge(f"Магазин {i}", "Стік", capacity=float("inf"))

# Обчислення максимального потоку
flow_value, flow_dict = nx.maximum_flow(G, "Джерело", "Стік")

# Вивід результату
print("Загальний максимальний потік:", flow_value)
print("\nФактичні потоки від терміналів до магазинів:")
for terminal in ["Термінал 1", "Термінал 2"]:
    for warehouse, warehouse_flow in flow_dict[terminal].items():
        for shop, shop_flow in flow_dict.get(warehouse, {}).items():
            if shop.startswith("Магазин") and shop_flow > 0:
                print(f"{terminal} → {shop}: {shop_flow}")
